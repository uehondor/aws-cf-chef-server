{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Sample template to bring up an Opscode Chef Server using the Chef Server cookbook. This configuration creates and starts the Chef Server with the WebUI enabled. A WaitCondition is used to hold up the stack creation until the application is deployed. **WARNING** This template creates one or more Amazon EC2 instances. You will be billed for the AWS resources used if you create a stack from this template.",
    "Mappings": {
        "AWSInstanceType2Arch": {
            "c1.medium": {
                "Arch": "64"
            },
            "c1.xlarge": {
                "Arch": "64"
            },
            "m1.large": {
                "Arch": "64"
            },
            "m1.medium": {
                "Arch": "64"
            },
            "m1.small": {
                "Arch": "64"
            },
            "m1.xlarge": {
                "Arch": "64"
            },
            "m2.2xlarge": {
                "Arch": "64"
            },
            "m2.4xlarge": {
                "Arch": "64"
            },
            "m2.xlarge": {
                "Arch": "64"
            },
            "m3.2xlarge": {
                "Arch": "64"
            },
            "m3.xlarge": {
                "Arch": "64"
            },
            "t1.micro": {
                "Arch": "64"
            }
        },
        "AWSRegionArch2AMI": {
            "ap-northeast-1": {
                "32": "ami-d8b812d9",
                "64": "ami-dab812db"
            },
            "ap-southeast-1": {
                "32": "ami-62582130",
                "64": "ami-60582132"
            },
            "ap-southeast-2": {
                "32": "ami-858611bf",
                "64": "ami-fb8611c1"
            },
            "eu-west-1": {
                "32": "ami-359ea941",
                "64": "ami-379ea943"
            },
            "sa-east-1": {
                "32": "ami-e23ae5ff",
                "64": "ami-1e39e603"
            },
            "us-east-1": {
                "32": "ami-06ad526f",
                "64": "ami-2d467844"
            },
            "us-west-1": {
                "32": "ami-116f3c54",
                "64": "ami-136f3c56"
            },
            "us-west-2": {
                "32": "ami-7ef9744e",
                "64": "ami-60f97450"
            }
        }
    },
    "Outputs": {
        "ChefSecurityGroup": {
            "Description": "EC2 Security Group with access to Opscode chef server",
            "Value": {
                "Ref": "ChefClientSecurityGroup"
            }
        },
        "ServerURL": {
            "Description": "URL of newly created Opscode chef server",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "ChefServer",
                                "PublicDnsName"
                            ]
                        }
                    ]
                ]
            }
        },
        "ValidationKeyBucket": {
            "Description": "Location of validation key",
            "Value": {
                "Ref": "PrivateKeyBucket"
            }
        },
        "WebUI": {
            "Description": "URL of Opscode chef server WebUI",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "ChefServer",
                                "PublicDnsName"
                            ]
                        }
                    ]
                ]
            }
        }
    },
    "Parameters": {
        "ChefServerCookbookVersion": {
            "Default": "master",
            "Description": "Chef Server Cookbook Version",
            "Type": "String"
        },
        "ChefServerFQDN": {
            "Description": "FQDN of Chef Server",
            "Type": "String"
        },
        "InstanceType": {
            "AllowedValues": [
                "t1.micro",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "cc1.4xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Default": "m1.small",
            "Description": "WebServer EC2 instance type",
            "Type": "String"
        },
        "KeyName": {
            "AllowedPattern": "[\\x20-\\x7E]*",
            "ConstraintDescription": "can contain only ASCII characters.",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the web server",
            "MaxLength": "255",
            "MinLength": "1",
            "Type": "String"
        },
        "SSHLocation": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Default": "0.0.0.0/0",
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        }
    },
    "Resources": {
        "BucketPolicy": {
            "Properties": {
                "Bucket": {
                    "Ref": "PrivateKeyBucket"
                },
                "PolicyDocument": {
                    "Id": "WritePolicy",
                    "Statement": [
                        {
                            "Action": [
                                "s3:PutObject"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::GetAtt": [
                                        "ChefServerUser",
                                        "Arn"
                                    ]
                                }
                            },
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "PrivateKeyBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Sid": "WriteAccess"
                        }
                    ],
                    "Version": "2008-10-17"
                }
            },
            "Type": "AWS::S3::BucketPolicy"
        },
        "ChefClientSecurityGroup": {
            "Properties": {
                "GroupDescription": "Group with access to Chef Server"
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "ChefServer": {
            "DependsOn" : "BucketPolicy",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config" : {
                        "packages" : {
                            "apt" : {
                                "s3cmd" : [],
                                "curl" : [],
                                "wget": []
                            }
                        },
                        "files" : {
                            "/etc/chef/solo.rb" : {
                                "content" : { "Fn::Join" : ["\n", [
                                    "file_cache_path \"/var/chef/cache\"",
                                    "cookbook_path \"/var/chef/cookbooks\""
                                ]]},
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                            },

                            "/home/ubuntu/.s3cfg" : {
                                "content" : { "Fn::Join" : ["", [
                                    "[default]\n",
                                    "access_key = ", { "Ref" : "HostKeys" }, "\n",
                                    "secret_key = ", {"Fn::GetAtt": ["HostKeys", "SecretAccessKey"]}, "\n",
                                    "use_https = True\n"
                                ]]},
                                "mode"   : "000644",
                                "owner"  : "ubuntu",
                                "group"  : "ubuntu"
                            },

                            "/etc/chef/chef.json" : {
                                "content": {
                                    "chef-server": {
                                        "api_fqdn": { "Ref": "ChefServerFQDN" },
                                        "configuration": {
                                            "chef_server_webui": {
                                                "enable": true
                                            }
                                        }
                                    },
                                    "run_list": [
                                        "recipe[chef-server::default]"
                                    ]
                                },
                                "mode"  : "000644",
                                "owner" : "root",
                                "group" : "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, { "Fn::FindInMap": [ "AWSInstanceType2Arch", { "Ref": "InstanceType" }, "Arch" ] } ]},
                "InstanceType": { "Ref": "InstanceType" },
                "KeyName": { "Ref": "KeyName" },
                "SecurityGroups": [ { "Ref": "ChefServerSecurityGroup" } ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",

                                "function error_exit\n",
                                "{\n",
                                "  cfn-signal -e 1 -r \"$1\" '", { "Ref": "ChefServerWaitHandle" }, "'\n",
                                "  exit 1\n",
                                "}\n",

                                "apt-get -y install python-setuptools\n",
                                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                                "cfn-init --region ", { "Ref": "AWS::Region" },
                                "    -s ", { "Ref": "AWS::StackId" }, " -r ChefServer ",
                                "         --access-key ", { "Ref": "HostKeys" },
                                "         --secret-key ", { "Fn::GetAtt": [ "HostKeys", "SecretAccessKey" ] }, " || error_exit 'Failed to run cfn-init'\n",

                                "# Bootstrap chef\n",

                                "# install chef-solo\n",
                                "curl -L https://www.opscode.com/chef/install.sh | bash > /tmp/chef_install.log 2>&1 || error_exit 'Failed to bootstrap chef-solo'\n",

                                "# create required bootstrap dirs/files\n",
                                "mkdir -p /var/chef/cache /var/chef/cookbooks/chef-server > /tmp/make_directories.log 2>&1 || error_exit 'Failed to create necessary directories'\n",

                                "# pull down this chef-server cookbook\n",
                                "wget -qO- https://github.com/opscode-cookbooks/chef-server/archive/", { "Ref": "ChefServerCookbookVersion"}, ".tar.gz | tar xvzC /var/chef/cookbooks/chef-server --strip-components=1 > /tmp/download_chef_server_cookbook.log 2>&1  || error_exit 'Failed to download and extract chef-server cookbook'\n",

                                "# run chef-solo\n",
                                "sudo chef-solo -c /etc/chef/solo.rb -j /etc/chef/chef.json > /tmp/chef_solo.log 2>&1 || error_exit 'Failed to bootstrap chef server'\n",

                                "# copy validation key to S3 bucket\n",
                                "s3cmd -c /home/ubuntu/.s3cfg put /etc/chef-server/chef-validator.pem s3://", { "Ref": "PrivateKeyBucket" }, "/chef-validator.pem > /tmp/put_validation_key.log 2>&1 || error_exit 'Failed to put Chef Server validation key'\n",

                                "# copy client key to S3 bucket\n",
                                "s3cmd -c /home/ubuntu/.s3cfg put /etc/chef-server/admin.pem s3://", { "Ref": "PrivateKeyBucket" }, "/admin.pem > /tmp/put_client_key.log 2>&1 || error_exit 'Failed to put client admin.pem key'\n",
                                
                                "# If all went well, signal success\n",
                                "cfn-signal -e $? -r 'Chef Server configuration' '", { "Ref": "ChefServerWaitHandle"}, "'\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "ChefServerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Open up SSH access plus Chef Server required ports",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": { "Ref": "SSHLocation" },
                        "FromPort": "22",
                        "ToPort": "22",
                        "IpProtocol": "tcp"
                    },
                    {
                        "FromPort": "443",
                        "ToPort": "443",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupName": { "Ref": "ChefClientSecurityGroup" }
                    },
                    {
                        "CidrIp": { "Ref": "SSHLocation" },
                        "FromPort": "443",
                        "ToPort": "443",
                        "IpProtocol": "tcp"
                    }
                ]
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "ChefServerUser": {
            "Properties": {
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "cloudformation:DescribeStackResource",
                                        "s3:Put"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "root"
                    }
                ]
            },
            "Type": "AWS::IAM::User"
        },
        "ChefServerWaitCondition": {
            "DependsOn": "ChefServer",
            "Properties": {
                "Handle": {
                    "Ref": "ChefServerWaitHandle"
                },
                "Timeout": "1200"
            },
            "Type": "AWS::CloudFormation::WaitCondition"
        },
        "ChefServerWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "HostKeys": {
            "Properties": {
                "UserName": { "Ref": "ChefServerUser" }
            },
            "Type": "AWS::IAM::AccessKey"
        },
        "PrivateKeyBucket": {
            "DeletionPolicy": "Delete",
            "Properties": {
                "AccessControl": "Private"
            },
            "Type": "AWS::S3::Bucket"
        }
    }
}